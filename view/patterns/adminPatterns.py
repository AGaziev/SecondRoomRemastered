from aiogram import types
from datetime import date

adminGreeting = '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞'

authorizationRejection = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'


def getTextForPropertyRequest(name, isOptional=False):
    text = f'–ù–∞–ø–∏—à–∏—Ç–µ {name}'
    if isOptional:
        text += '(\'-\' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)'
    return text


def getClothInfoForChannel(data: dict):
    try:
        userMention = f"<a href=\"tg://user?id={data['userId']}\">{data['user']}</a>"
    except:
        userMention = data['user']
    name = (f'\"{data["name"]}\"' if data["name"] != 'None' else '')
    return f'{data["brand"]}\n\n' \
           f'{data["subCategory"]} {name}\n\n' \
           f'{data["size"]}\n\n' \
           f'{data["price"]}\n\n' \
           f'–ó–∞ –ø–æ–∫—É–ø–∫–æ–π {userMention}'


def createMediaGroupForPost(clothInfo: dict):
    media = types.MediaGroup()
    for i in range(len(clothInfo['photo'])):
        media.attach_photo(photo=types.InputMediaPhoto(clothInfo['photo'][i],
                                                       caption=getClothInfoForChannel(clothInfo) if i == 0 else '',
                                                       parse_mode=types.ParseMode.HTML))
    return media


def chooseStatShowPeriod():
    return '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'


def writeStatShowDay():
    return f'–ù–∞–ø–∏—à–∏ –¥–µ–Ω—å –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n\n' \
           f'YYYY-MM-DD\n' \
           f'–ù–∞–ø—Ä–∏–º–µ—Ä, {date.today()}'


rolesRules = {
    'can_delete_all': 'üö´ –ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ –≤–µ—â–∏\n',
    'access_statistics': 'üìà –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n',
    'can_post_in_group': 'üìù –ü–æ—Å—Ç–∏—Ç—å —Å–≤–æ–∏ –≤–µ—â–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É\n',
    'can_edit_roles': 'üëë –ò–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n',
    'access_admin_panel': 'üòé –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞\n',
    'can_add_clothes': 'üëï –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –≤–µ—â–∏\n',
    'access_catalog': 'üì≤ –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –≤–µ—â–µ–π\n'
}


def roleDescription(roles):
    text = '–ß—Ç–æ –º–æ–≥—É—Ç —Ä–∞–∑–Ω—ã–µ —Ä–æ–ª–∏\n\n'
    for role in roles:
        text += f'*{role["name"].upper()}\n*'
        for perm in rolesRules:
            if role[perm]:
                text += f'{rolesRules.get(perm, "")}'
    bannedPermissions = '–ù–∏—á–µ–≥–æ :('
    return text + bannedPermissions


def listOfUsersExceptRole(roleNameChangeTo, usersExceptRole):
    text = '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n'
    for user in usersExceptRole:
        text += f'/{user.telegram_id} - {user.mention}\n'
    text += f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Ä–æ–ª—å –Ω–∞ {roleNameChangeTo}'
    return text


def isActuallyChangeRoleToUser(roleNameChangeTo, userToChange):
    return f'–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å {userToChange.mention} –Ω–∞ {roleNameChangeTo}?'